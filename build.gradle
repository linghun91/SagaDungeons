plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'cn.i7mc'

// 版本管理
def versionFile = file('version.properties')
def currentVersion = '1.1.0.1'

// 读取当前版本
if (versionFile.exists()) {
    def props = new Properties()
    versionFile.withInputStream { props.load(it) }
    currentVersion = props.getProperty('version', '1.1.0.1')
}

// 自动迭代版本号
def getNextVersion(String currentVer) {
    def versionParts = currentVer.split('\\.')
    if (versionParts.length == 4) {
        def major = versionParts[0] as int
        def minor = versionParts[1] as int
        def patch = versionParts[2] as int
        def build = versionParts[3] as int

        // 迭代版本号：第四位+1
        build++

        return "${major}.${minor}.${patch}.${build}"
    }
    return currentVer
}

// 获取新版本号并立即更新
def newVersion = getNextVersion(currentVersion)

// 更新 version.properties
def versionProps = new Properties()
versionProps.setProperty('version', newVersion)
versionFile.withOutputStream { versionProps.store(it, 'Auto-incremented version') }

// 设置项目版本为新版本
version newVersion

// 更新 plugin.yml 中的版本
def updatePluginYmlVersionAtInit(String ver) {
    def pluginYmlFile = file('src/main/resources/plugin.yml')
    if (pluginYmlFile.exists()) {
        def content = pluginYmlFile.getText('UTF-8')
        def updatedContent = content.replaceAll(/(?m)^version:\s*['"]?[^'"]*['"]?/, "version: '${ver}'")
        pluginYmlFile.setText(updatedContent, 'UTF-8')
        println "plugin.yml 版本已更新为: ${ver}"
    }
}

updatePluginYmlVersionAtInit(newVersion)
println "版本已从 ${currentVersion} 更新到 ${newVersion}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    // MythicMobs仓库
    maven {
        name = 'lumine'
        url = 'https://mvn.lumine.io/repository/maven-public/'
    }
    // PlaceholderAPI仓库
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT'

    // Vault API - 使用本地依赖
    compileOnly files('libs/Vault.jar')

    // MythicMobs API - 使用本地依赖
    compileOnly files('libs/MythicMobs.jar')

    // PlaceholderAPI - 使用本地依赖
    compileOnly files('libs/PlaceholderAPI.jar')

    // PlayerPoints - 使用本地依赖
    compileOnly files('libs/PlayerPoints.jar')
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set('')
    archiveVersion.set(project.version.toString())
}

tasks.build.dependsOn tasks.shadowJar
